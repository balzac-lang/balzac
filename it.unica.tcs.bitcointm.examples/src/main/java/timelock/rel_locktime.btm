package it.unica.btm.rel_locktime

network testnet

const kA = key:cSthBXr8YQAexpKeh22LB9PdextVE1UJeahmyns5LzcmMDSy59L4
const kB = key:cQtkW1zgFCckRYvJ2Nm8rryV825GyDJ51qoJCw72rhHG4YmGfYgZ
const kL = key:cRLgSnk3t7DhitfxkS21dWrBEiF8mFm2fSwEskLhk9shV4Jkuz66

const blockN = 500_000
const deadline = 2018-06-11T15:00:00+02:00
const aDay = 24*60*60

transaction coinbase {
	input = _
	output = 10 BTC: fun(s) . versig(kA; s)
}

/*
 * transaction with relative constraints within output scripts
 */
transaction T_cons {
	input = coinbase: sig(kA)
	output = [
		1 BTC:
		fun(sig1, sig2) .
			versig(kA,kB; sig1,sig2)
			|| after 5 block : versig(kA,kB,kL; sig1,sig2);

		1 BTC:
		fun(sig1, sig2) .
			versig(kA,kB; sig1,sig2)
			|| after 45min: versig(kA,kB,kL; sig1,sig2)
	]
}

/*
 * T_1 redeems at any time
 */
transaction T_1 {
	input = [
		T_cons: sig(kA) sig(kB);
		T_cons@1: sig(kA) sig(kB);
	]
	output = 0: "test"
}


/*
 * T_2 does not satisfy timelock constraints
 */
transaction T_2_block {
	input = T_cons: sig(kA) sig(kL)
	output = 0: "test"
	timelock = after 4 block from T_cons
}

transaction T_2_delay {
	input = T_cons@1: sig(kA) sig(kL)
	output = 0: "test"
	timelock = after 10m from T_cons
}

transaction T_2_mismatch {
	input = T_cons: sig(kA) sig(kL)
	output = 0: "test"
	timelock = after 3h from T_cons
}

/*
 * T_3 T_4 satisfy timelock constraints.
 */
transaction T_3_block {
	input = T_cons: sig(kA) sig(kL)
	output = 0: "test"
	timelock = after 6 block from T_cons
}

transaction T_3_delay {
	input = T_cons@1: sig(kA) sig(kL)
	output = 0: "test"
	timelock = after 1h from T_cons
}

transaction T_4_block {
	input = T_cons: sig(kB) sig(kL)
	output = 0: "test"
	timelock = after 6 block from T_cons
}

transaction T_4_delay {
	input = T_cons@1: sig(kB) sig(kL)
	output = 0: "test"
	timelock = after 1h from T_cons
}


/*
 * transaction with relative constraints (same type) within output scripts
 */
transaction T_cons2 {
	input = coinbase: sig(kA)
	output = [
		1 BTC:
		fun(sig1, sig2) .
			versig(kA,kB; sig1,sig2)
			|| after 5 block : versig(kA,kB,kL; sig1,sig2);

		1 BTC:
		fun(sig1, sig2) .
			versig(kA,kB; sig1,sig2)
			|| after 10 block : versig(kA,kB,kL; sig1,sig2);

		1 BTC: fun(s) . versig(kA; s)
	]
}

transaction T_5 {
	input = [
		T_cons2: sig(kA) sig(kL);
		T_cons2@1: sig(kA) sig(kL);
		T_cons2@2: sig(kA)
	]
	output = 0: "test"
	timelock = after 10 block from T_cons2	// timelock must satisfy all inputs
}

compile
	T_cons
	T_1

	T_2_block
	T_2_delay
	T_2_mismatch

	T_3_block
	T_3_delay
	T_4_block
	T_4_delay

	T_cons2
	T_5

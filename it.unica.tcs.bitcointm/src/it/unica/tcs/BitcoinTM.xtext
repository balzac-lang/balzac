/*
 * Copyright 2017 Nicola Atzei
 */

grammar it.unica.tcs.BitcoinTM with org.eclipse.xtext.common.Terminals

generate bitcoinTM "http://www.unica.it/tcs/BitcoinTM"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	package=PackageDeclaration?
//	imports+=Import*
	net=Network?
	declarations+=Element*
	compile=Compile?
;

PackageDeclaration:
    'package' name=QualifiedName;

QualifiedName: ID ('.' ID)*;

Import:
    'import' importedNamespace=QualifiedNameWithWildcard;

QualifiedNameWithWildcard:
    QualifiedName '.*'?;

Element:
	Constant
|	Transaction;

Network: {Network} "network" (testnet?="testnet" | mainnet?="mainnet" | regtest?="regtest");

Parameter:
	name=ID
	(":" type=PermittedType)?;

/*
 * transactions (special case of Declaration)
 */

Constant:
	"const" name=ID (":" type=PermittedType)? "=" exp=Expression;

Transaction:
	checks+=OnDemandCheck*
	"transaction" name=ID ("(" (params+=Parameter ("," params+=Parameter)*)? ")")? "{"
		"input"  "=" (inputs+=(Input|InputPlaceholder)  | (multiIn?="["  inputs+=Input   (";" inputs+=Input)* ";"? "]") )
		"output" "=" (outputs+=Output| (multiOut?="[" outputs+=Output (";" outputs+=Output)* ";"? "]") )
		("timelock" "=" (timelocks+=Timelock| (multiLock?="[" timelocks+=Timelock (";" timelocks+=Timelock)* ";"? "]") ))?
	"}";

Input:
	txRef=Expression ("@" outpoint=LONG)? ":" exps+=AtomicExpression+ ("["redeemScript=Script"]")?;

InputPlaceholder returns Input:
	placeholder?="_";

Output:
	value=BitcoinValue ":" script=Script;

BitcoinValue:
	exp=Expression;

Timelock:
	"after" (AbsoluteTime | RelativeTime);

AbsoluteTime:
	(block?="block" | "date") value=Expression;

RelativeTime:
	((value=Expression block?="block")
	| (delay=Delay))
	("from" tx=Expression)?;

Script:
	(lambda?="fun"  "(" (params+=Parameter ("," params+=Parameter)*)? ")" ".")? exp=Expression;


/* on-demand checks */
OnDemandCheck:
	IsMinedCheck
|	IsNotMinedCheck;

IsMinedCheck: {IsMinedCheck} mined?="@isMined";
IsNotMinedCheck: {IsMinedCheck} "@isNotMined";


/*
 * script expressions
 */

Expression:
    OrExpression;

OrExpression returns Expression:
	AndExpression (({OrExpression.left=current} => '||' ) right=AndExpression)*;

AndExpression returns Expression:
	Comparison (({AndExpression.left=current} '&&') right=Comparison)*;

Comparison returns Expression:
	Equals (({Comparison.left=current} op=('>=' | '<=' | '>' | '<') ) right=Equals)*;

Equals returns Expression:
	Addition (({Equals.left=current} op=("==" | "!=") ) right=Addition)*;

Addition returns Expression:
    Multiply (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiply)*;

Multiply returns Expression:
    Prefixed (({Times.left=current} '*' | {Div.left=current} '/') right=Prefixed)*;

Prefixed returns Expression:
    {BooleanNegation} =>"!" exp=AtomicExpression | /* right associativity */
    {ArithmeticSigned} =>"-" exp=AtomicExpression | /* right associativity */
    AtomicExpression;


AtomicExpression returns Expression:
'(' Expression ')'
|	Literal
|	Reference

|	Hash
|   Signature
|	Versig
|	IfThenElse
|	Min
|   Max
|   Between
|   Size
|	AfterTimeLock
;

Reference:
	ref=[Referrable|QualifiedName]
	( => "("(actualParams+=Expression ("," actualParams+=Expression)*)?")")?;

Referrable:
	Parameter
|	Transaction
|	Constant;

Literal:
	NumberLiteral
|	StringLiteral
|	BooleanLiteral
|	DateLiteral
|	HashLiteral
|	KeyLiteral
|	AddressLiteral
|   PubKeyLiteral
|   TransactionLiteral
|	SignatureLiteral;

TransactionLiteral:
    TransactionHexLiteral
|   TransactionIDLiteral;

NumberLiteral: value=Number;
StringLiteral: value=STRING;
BooleanLiteral: ^true?='true' | {BooleanLiteral} 'false';
DateLiteral: value=TIMESTAMP;
HashLiteral: value=HASH_TERM;
KeyLiteral: value=KEY_WIF;
AddressLiteral: value=ADDRESS_WIF;
PubKeyLiteral: value=PUBKEY;
TransactionHexLiteral: value=TXSERIAL;
TransactionIDLiteral: value=TXID;
SignatureLiteral: value=SIGHEX (-> "[" key=Expression "]")?;

IfThenElse:
	'if' if=Expression
	"then" then=AtomicExpression
	'else' else=AtomicExpression;

Signature: "sig" "(" privkey=Expression ")" ("[" modifier=Modifier "]")? ("of" tx=AtomicExpression (=>"@" inputIdx=LONG)?)?;

enum Modifier:
	AIAO
|	AISO
|	AINO
|	SIAO
|	SISO
|	SINO;

Versig:
	"versig" "("
		pubkeys+=Expression ("," pubkeys+=Expression)* ";"
		signatures+=Expression ("," signatures+=Expression)*
	")";

Hash: Hash160 | Hash256 | Ripemd160 | Sha256 | Sha1;
Hash160: 	'hash160' "(" value=Expression ")";
Hash256: 	'hash256' "(" value=Expression ")";
Ripemd160: 	'ripemd160' "(" value=Expression ")";
Sha256:     'sha256' "(" value=Expression ")";
Sha1:       'sha1' "(" value=Expression ")";

Min: "min" "(" left=Expression "," right=Expression ")";
Max: "max" "(" left=Expression"," right=Expression ")";
Between: "between" "(" value=Expression "," left=Expression":" right=Expression ")";
Size: "size" "(" value=Expression ")";
AfterTimeLock: "after" timelock=(AbsoluteTime | RelativeTime) ":" continuation=AtomicExpression;


Type:
	PermittedType
|   {VoidType} value=VoidTypeEnum
|	{TypeVariable} value=ID;

PermittedType:
	{IntType} value=IntTypeEnum
|	{StringType} value=StringTypeEnum
|   {BooleanType} value=BoolTypeEnum
|   {HashType} value=HashTypeEnum
|   {KeyType} value=KeyTypeEnum
|   {PubkeyType} value=PubkeyTypeEnum
|   {AddressType} value=AddressTypeEnum
|   {TransactionType} value=TransactionTypeEnum
|   {SignatureType} value=SignatureTypeEnum;

HashableType:
    {IntType} value=IntTypeEnum
|   {StringType} value=StringTypeEnum
|   {BooleanType} value=BoolTypeEnum
|   {HashType} value=HashTypeEnum;

enum IntTypeEnum: int;
enum StringTypeEnum: string;
enum BoolTypeEnum: bool | boolean;
enum KeyTypeEnum: key;
enum PubkeyTypeEnum: pubkey;
enum AddressTypeEnum: address;
enum SignatureTypeEnum: signature;
enum TransactionTypeEnum: transaction;
enum HashTypeEnum: hash;
enum VoidTypeEnum: void;

Typeable:
  Parameter
| Constant
| Transaction
| Input
| Output
| Timelock
| Expression
| Compile;

Interpretable:
	Expression
|	Transaction;

Number returns ecore::ELong:
	LONG ('.' LONG)? "BTC"?
|	LONG_HEX;

/*
 * 2h
 * 2h 10m
 * 35d 5h 10m
 */
Delay:
	{Delay} (minutes=MINUTE_DELAY? & hours=HOUR_DELAY? & days=DAY_DELAY?);

terminal MINUTE_DELAY returns ecore::ELong: LONG ("m"|"min"|"minute"|"minutes");
terminal HOUR_DELAY   returns ecore::ELong: LONG ("h"|"hour"|"hours");
terminal DAY_DELAY    returns ecore::ELong: LONG ("d"|"day"|"days");

terminal LONG_HEX returns ecore::ELong:
	('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')
	(('0'..'9'|'a'..'f'|'A'..'F'|'_')* ('0'..'9'|'a'..'f'|'A'..'F') )?;	// java-like hexadecimal number

terminal LONG returns ecore::ELong:
	'0'..'9' (('0'..'9'|'_')* '0'..'9')?  ; 	// java-like integer

terminal HASH_TERM returns ecore::EByteArray:  'hash:'      ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal TXID returns ecore::EString:          'txid:'      ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal TXSERIAL returns ecore::EString:      'tx:'        ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal SIGHEX returns ecore::EString:        'sig:'       ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal KEY_WIF returns ecore::EString:       'key:'       ('1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|'A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'J'|'K'|'L'|'M'|'N'|'P'|'Q'|'R'|'S'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z'|'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'m'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'u'|'v'|'w'|'x'|'y'|'z')+;
terminal PUBKEY returns ecore::EString:        'pubkey:'    ('0'..'9'|'a'..'f'|'A'..'F')+;
terminal ADDRESS_WIF returns ecore::EString:   'address:'   ('1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'|'A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'J'|'K'|'L'|'M'|'N'|'P'|'Q'|'R'|'S'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z'|'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'m'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'u'|'v'|'w'|'x'|'y'|'z')+;

/*
 * 2011-12-03T10:15:30+01:00
 * 2011-12-03T10:15:30
 * 2011-12-03T10:15
 * 2011-12-03
 */
terminal TIMESTAMP returns ecore::ELong: DATE ("T" TIME OFFSET? )?;

terminal DATE:    YEAR '-' MONTH '-' DAY;
terminal TIME:    HOUR ':' MINUTE (':' SECOND)?;
terminal OFFSET:  OFFSET_SIGN OFFSET_HOUR ":" OFFSET_MINUTE;

terminal YEAR: ('1'..'9')('0'..'9')('0'..'9')('0'..'9');
terminal MONTH: ('0'..'9')('1'..'9');
terminal DAY: ('0'..'9')('1'..'9');
terminal HOUR: ('0'..'2')('0'..'9');
terminal MINUTE: ('0'..'5')('0'..'9');
terminal SECOND: ('0'..'5')('0'..'9');
terminal OFFSET_SIGN: "+"|"-";
terminal OFFSET_HOUR: '0'('0'..'9') | '1'('0'..'2');
terminal OFFSET_MINUTE: '0''0' | '3''0';

@Override
terminal INT returns ecore::EInt: LONG;

Compile:
	{Compile} "compile" txs+=Reference*
;

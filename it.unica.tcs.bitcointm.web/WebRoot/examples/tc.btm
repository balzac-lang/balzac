// some constants
const fee = 0.00113 BTC     // miner's fee
const deadline = 2018-06-11 // deadline to reveal the secret

// Alice's public key
const kApub = pubkey:03ff41f23b70b1c83b01914eb223d7a97a6c2b24e9a9ef2762bf25ed1c1b83c9c3
// Bob's public key
const kBpub = pubkey:03a5aded4cfa04cb4b49d4b19fe8fac0b58802983018cdd895a28b643e7510c1fb

// tx with Alice's funds, redeemable with kA
transaction A_funds { input = _ output = 10 BTC: fun(sigma) . versig(kApub; sigma)}

participant Alice {
    // Alice's private key
    private const kA = key:cSthBXr8YQAexpKeh22LB9PdextVE1UJeahmyns5LzcmMDSy59L4

    private const secret = "42"         // Alice's secret
    const h = sha256(secret)    // hash of the secret
    
    transaction T_commit {
        input = A_funds: sig(kA)
        output = this.input.value - fee:
            fun(x,s:string) . sha256(s) == h && versig(kApub;x)
                || checkDate deadline : versig(kBpub;x)
    }
    
    transaction T_reveal {
        input =  T_commit: sig(kA) secret
        output = this.input.value - fee: fun(x) . versig(kApub;x)
    }
}

participant Bob {
    // Bob's private key
    private const kB = key:cQtkW1zgFCckRYvJ2Nm8rryV825GyDJ51qoJCw72rhHG4YmGfYgZ
    
    const T_commit = Alice.T_commit
    
    transaction T_timeout {
        input = T_commit: sig(kB) _
        output = this.input.value - fee: fun(x) . versig(kB;x)
        absLock = date deadline
    }
}

eval Alice.T_commit, Alice.T_reveal, Bob.T_timeout

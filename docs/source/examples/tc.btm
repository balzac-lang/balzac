package tc

network testnet

// some constants
const fee = 0.00113 BTC     // miner's fee
const secret = 42           // Alice's secret
const h = hash160(secret)   // hash of the secret
const deposit = 10 BTC      // Alice's deposit
const deadline = 2018-06-11 // deadline to reveal the secret

/*
 * Alice's perspective
 */

// Alice's private key
const kA = wif:cSthBXr8YQAexpKeh22LB9PdextVE1UJeahmyns5LzcmMDSy59L4
const kApub = pubkey:03ff41f23b70b1c83b01914eb223d7a97a6c2b24e9a9ef2762bf25ed1c1b83c9c3

// Bob's address
const kBpub = pubkey:03a5aded4cfa04cb4b49d4b19fe8fac0b58802983018cdd895a28b643e7510c1fb

// tx with Alice's funds, redeemable with kA
transaction A_funds { input = _ output = 10 BTC: fun(sigma) . versig(kApub; sigma)}

transaction T_commit {
    input = A_funds: sig(kA)
    output = deposit - fee:
        fun(x,s:int) . hash160(s) == h && versig(kA;x)
            || after date deadline : versig(kBpub;x)
}

transaction T_reveal {
    input =  T_commit: sig(kA) secret
    output = deposit - fee*2: fun(x) . versig(kA;x)
}

/*
 * Bob's perspective
 */

// Bob's private key
const kB = wif:cQtkW1zgFCckRYvJ2Nm8rryV825GyDJ51qoJCw72rhHG4YmGfYgZ

transaction T_timeout {
    input = T_commit: sig(kB) 0
    output = deposit - fee*2: fun(x) . versig(kB;x)
    timelock = after date deadline
}

compile T_commit T_reveal T_timeout
